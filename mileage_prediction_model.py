# -*- coding: utf-8 -*-
"""Mileage_Prediction_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GD0R0XzABKfdSV60j0O3071NWxliibg_

# **Mileage Prediction - Regression Analysis**

# **Objective**

Objective of this project is to develop a machine learning model which can predict the mileage.

# **Data Source :**

This dataset was taken from the StatLib library which is maintained at Carnegie Mellon University. The dataset was used in 1983 American Statistical Exposition.

**Data Set Information :**

This dataset is a slightly modified version of the dataset provided in the StatLib library. In line with the use by Ross Quinlan (1993) in predicting the attribute "mpg", 8 of the original instances were removed because they had unknown values for the "mpg" attribute. The original dataset is available in the file "auto-mpg.data-original".

"The data concerns city-cycle fuel consumption in miles per gallon, to be predicted in terms of 3 multivalued discrete and 5 continuous attribute". (Quinlan,1993)

**Attribute Information :**

  1. mpg: continuous
  2. cylinders: multi-valued discrete
  3. displacement: continuous
  4. horsepower: continuous
  5. weight: continuous
  6. accelaration: continuous
  7. model year: multi_valued discrete
  8. origin: valued discrete
  9. car name: string (unique for each instance)

# **Import Library**
"""

import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

import seaborn as sns

"""# **Import Data**"""

data = pd.read_csv("https://github.com/YBI-Foundation/Dataset/raw/main/MPG.csv")

data.head()

data.nunique()

"""# **Data Preprocessing**"""

data.info()

data.describe()

data.corr()

"""# **Remove Missing Values**"""

df = data.dropna()

df.info()

"""# **Data Visualization**"""

sns.pairplot(df, x_vars= ['displacement','horsepower','weight','acceleration','mpg'], y_vars= ['mpg']);

sns.regplot(x='displacement',y='mpg',data =df);

"""# **Define Target Variable y and Feature X**"""

df.columns

y=df['mpg']

y.shape

X= df[['displacement', 'horsepower', 'weight','acceleration']]

X.shape

X

"""# **Scaling Data**"""

from sklearn.preprocessing import StandardScaler

ss= StandardScaler()

X= ss.fit_transform(X)

X

pd.DataFrame(X).describe()

"""**After Stadardization Mean is Zero and Standard Deviation is One**

# **Train Test Split Data**
"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y,train_size=0.7, random_state = 2529)

X_train.shape,X_test.shape, y_train.shape, y_test.shape

"""# **Linear Regression Model**"""

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

lr.fit(X_train, y_train)

lr.intercept_

lr.coef_

"""**Mileage = 23.4 - 1.05*Displacement - 1.68*Horsepower - 4.10*Weight - 0.115*Acceleration + error**

# **Predict Test Data**
"""

y_pred= lr.predict(X_test)

y_pred

"""# **Model Accuracy**"""

from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, r2_scoremb

mean_absolute_error(y_test,y_pred)

mean_absolute_percentage_error(y_test,y_pred)

r2_score(y_test,y_pred)

"""# **Model Evaluation**

# *Polynomial Regression*
"""

from sklearn.preprocessing import PolynomialFeatures

poly = PolynomialFeatures(degree=2, interaction_only=True, include_bias=False)

X_train2 = poly.fit_transform(X_train)

X_test2 = poly.fit_transform(X_test)

lr.fit(X_train2, y_train)

lr.intercept_

lr.coef_

y_pred_poly = lr.predict(X_test2)

"""# *Model Accuracy*"""

from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, r2_score

mean_absolute_error(y_test, y_pred_poly)

mean_absolute_percentage_error(y_test, y_pred_poly)

r2_score(y_test, y_pred_poly)

"""# **Explaination**

In this model, we used Linear Regression Model to solve the problem because mileage prediction problem is a Regression Problem, since it can give any continuous real number.

Here we have to plot all the features and Target Variable values of X_train and y_train to plot a Best Fit Line in the Linear Regression Model which gives us some intercept and co-efficient of feature variables.

In our model we get output model as

**Mileage = 23.4 - 1.05Displacement - 1.68Horsepower - 4.10Weight - 0.115Acceleration + error**

This equation Gives us a model with aproxximately 85.3% of accuracy and about 14.7% error.

In Order of Model Evolution we use Polynomial Regression which improves our models accuracy about 2.5% and gives 87% of accuracy in prediction.
"""